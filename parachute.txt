                             ━━━━━━━━━━━━━━
                               PARACHUTE


                              Mark Evenson
                             ━━━━━━━━━━━━━━


Table of Contents
─────────────────

1 Installation
.. 1.1 Place chute.asd in ASDF3 system registry
.. 1.2 Loading from ASDF
.. 1.3 Testing from ASDF
.. 1.4 Loading Quicklisp dependencies
.. 1.5 TODO BTRFS volume must have ".snapshot/" directory
2 REST API
.. 2.1 PUT n bytes in m windows
3 Client platform arm32
.. 3.1 CCL
4 Server platform x64
.. 4.1 SBCL
5 What is to be DONE
.. 5.1 DONE make a hard link to btrfs, setuid
.. 5.2 BTRFS/SEND
..... 5.2.1 DONE stdout/stderr mixing
..... 5.2.2 DONE Use octet streams
.. 5.3 TODO parse id for PUT uri from POST
.. 5.4 TODO Read key from key device
.. 5.5 TODO Initialize nonce from random data
.. 5.6 TODO Read domain from /opt/cloudfleet/data/config/blimp-vars.sh
.. 5.7 DONE MAKE-NEW-DIRECTORY
.. 5.8 TODO Verify basic transfer
6 Colophon


#+TITLE Parachute: a zero knowledge backup system


1 Installation
══════════════

1.1 Place chute.asd in ASDF3 system registry
────────────────────────────────────────────

  ┌────
  │ mkdir -p ~/.config/common-lisp/source-registry.conf.d/
  │ cp chute.conf ~/.config/common-lisp/source-registry.conf.d/
  └────


1.2 Loading from ASDF
─────────────────────

  ┌────
  │ (asdf:load-system :chute)
  └────


1.3 Testing from ASDF
─────────────────────

  ┌────
  │ (asdf:test-system :chute)
  └────


1.4 Loading Quicklisp dependencies
──────────────────────────────────

  ┌────
  │ wget https://beta.quicklisp.org/quicklisp.lisp
  │ (load "~/quicklisp.lisp")
  └────
  ┌────
  │ (load (asdf:system-relative-pathname 
  │    (asdf:find-system :chute) "quicklisp-setup"))
  └────


1.5 TODO BTRFS volume must have ".snapshot/" directory
──────────────────────────────────────────────────────

  The CHUTE:SNAPSHOT command will create snapshots under a the specified
  volume (by default "/opt/cloudfleet/data") in a sub-directory named
  ".snapshot/", i.e. for the default in
  "/opt/cloudfleet/data/.snapshot/<TIMESTAMP>".

  Therefore, the "/opt/cloudfleet/data/.snapshot/" must exist and be
  owned by root.  Currently this is done once per node as part of
  installation when "setup/add-subvolume.bash" is executed.  It should
  be made part of the setup done by setting up the encrypted volumes.


2 REST API
══════════

2.1 PUT n bytes in m windows
────────────────────────────

  Each chunk of a blob is adressed as a URI of the form:

  ┌────
  │ .../<timestamp>/<hash>/<n-bytes>/<mth-window>
  └────

  MIME type is "application/octet-stream".


3 Client platform arm32
═══════════════════════

3.1 CCL
───────

  [http://trac.clozure.com/ccl/wiki/PlatformNotes]


4 Server platform x64
═════════════════════

4.1 SBCL
────────

  sbcl-1.3.1 known to work


5 What is to be DONE
════════════════════

5.1 DONE make a hard link to btrfs, setuid
──────────────────────────────────────────

  • CLOSING NOTE [2015-10-27 Tue 12:44]
         Done as setup/make-suid-btfs.bash


5.2 BTRFS/SEND
──────────────

5.2.1 DONE stdout/stderr mixing
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  • CLOSING NOTE [2015-11-14 Sat 10:16]
          Fixed by specifying separate error/output arguments to
          CCL:RUN-PROGAM
  SBCL/CCL returning different starts of output stream.  CCL contains
  "At subvolume" which means it is mixing stdout/stderr?


5.2.2 DONE Use octet streams
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  • CLOSING NOTE [2015-11-19 Thu 10:47]
          Resolved by use of octets streams directly on MAKE-BLOB
  We should pass the streams we wish to read from, rather than having
  RUN-PROGAM construct them for us.

  Unfortunately, this doesn't seem to work:
  ┌────
  │ (ccl:run-program
  │    "/bin/ls" nil
  │    :wait nil
  │    :output (ironclad:make-octet-input-stream
  │            (make-array 16 :element-type '(unsigned-byte 8)))
  │    :element-type '(unsigned-byte 8))
  └────

  complaining about

  There is no applicable method for the generic function:
    #<STANDARD-GENERIC-FUNCTION STREAM-WRITE-VECTOR #x30200006518F>
  when called with arguments:
    (#<IRONCLAD::OCTET-INPUT-STREAM #x3020023CA75D> "chute
  LICENSE
  parachute.org
  setup
  ...

  Fortunately, CCL:RUN-PROGRAM takes an :ELEMENT-TYPE keyword which
  allows us to get octet streams out of the subprocesses.


5.3 TODO parse id for PUT uri from POST
───────────────────────────────────────


5.4 TODO Read key from key device
─────────────────────────────────

  Propsoal: extract appropiate number of bytes from SHA256 of the LuKS
  key


5.5 TODO Initialize nonce from random data
──────────────────────────────────────────

  Done.  But needs to be verified via a test.


5.6 TODO Read domain from /opt/cloudfleet/data/config/blimp-vars.sh
───────────────────────────────────────────────────────────────────


5.7 DONE MAKE-NEW-DIRECTORY
───────────────────────────

  • CLOSING NOTE [2015-12-13 Sun 10:40]
         Use CL-FAD routines instead of ASDF.
  Fails until run from the REPL.  Unsure what this entails.


5.8 TODO Verify basic transfer
──────────────────────────────

  (without byte ranges).

  The following needs to be implemented completely and tested:
  POST /blob/new
    (index.json)                
  ->>   x00 Resource created at URI


  GET /<URI>/index.json              
  ->>   200 Original index.json


  PUT /<URI>/0    
    (application/octet-bytes)
  ->>   200 Ok


  GET /<URI>/0/hash/sha256 
  ->>   x00 
    (json SHA256 Hash)

  For Resumable transfers

  PUT /<URI>/0/<n-bytes>/<mth-window>
  ->>   x00 


  GET /<URI>/0/<n-bytes>/<mth-window>/hash/sha256  
  ->>   x00 
    (json SHA256 Hash)


6 Colophon
══════════

  <mark@evenson.eu> Created: 01-OCT-2015 Revised: 13-DEC-2015
